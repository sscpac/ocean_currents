#! /usr/bin/env python
"""Provide visualization markers for ocean currents.

This software was developed by employees of the Federal Government in the course of
their official duties. Pursuant to title 17 Section 105 of the United States Code, this
software is not subject to copyright protection and is in the public domain. The
Government assumes no responsibility whatsoever for its use by other parties, and the
software is provided "AS IS" without warranty or guarantee of any kind, express or
implied, including, but not limited to, the warranties of merchantability, fitness for
a particular purpose, and noninfringement. In no event shall the Government be liable
for any claim, damages or other liability, whether in an action of contract, tort or
other dealings in the software. The software is not designed for use in (i) the design,
construction, operation or maintenance of any nuclear facility; (ii) navigating or
operating aircraft or any manned vehicle; or (iii) any life-saving, life-support or
life-critical medical equipment. The Government has no obligation hereunder to provide
maintenance, support, updates, enhancements, or modifications.  We would appreciate
acknowledgement if the software is used. This software can be redistributed and/or
modified freely provided that any derivative works bear some notice that they are
derived from it, and any modified versions bear some notice that they have been
modified.
"""

import math
import rospy
import tf

from geographic_msgs.msg import GeoPose
from geometry_msgs.msg import Point
from sensor_msgs.msg import NavSatFix
from std_msgs.msg import Time
from visualization_msgs.msg import Marker, MarkerArray

from ocean_currents.srv import GetOceanCurrent


class OceanCurrentsVisualization(object):
    """Provide visualization markers for ocean currents."""

    def __init__(self):
        rate = rospy.get_param("~rate", 0.5)
        self.num_rows = rospy.get_param("~num_rows", 7)
        self.num_cols = rospy.get_param("~num_cols", 7)
        self.robot_ns = rospy.get_param("~robot_ns", "rexrov")
        self.geo_pose = None
        self.listener = tf.TransformListener()

        self.gps_sub = rospy.Subscriber("gps_fix", NavSatFix, self.gps_callback)
        self.marker_pub = rospy.Publisher("marker", MarkerArray, queue_size=10)

        self.timer = rospy.Timer(rospy.Duration(1.0 / rate), self.timer_cb)

    def timer_cb(self, event):
        """Timer callback."""
        if self.geo_pose is None:
            rospy.loginfo("No GPS data received yet. Cannot continue.")
            return

        now = rospy.Time().now()
        try:
            self.listener.waitForTransform(
                "world", self.robot_ns + "/base_link", now, rospy.Duration(0.05)
            )
        except tf.Exception as exc:
            rospy.logerr("Timed out waiting for transform. %s", exc)

        try:
            (trans, _) = self.listener.lookupTransform(
                "world", self.robot_ns + "/base_link", rospy.Time(0)
            )
        except (
            tf.LookupException,
            tf.ConnectivityException,
            tf.ExtrapolationException,
        ) as exc:
            rospy.logerr("Could not look up transform. %s", exc)

        try:
            rospy.wait_for_service("get_ocean_current", 0.01)
        except rospy.ROSException as exc:
            rospy.logerr("%s", exc)

        try:
            client = rospy.ServiceProxy("get_ocean_current", GetOceanCurrent)
            time = Time()
            time.data = now
            resp = client(time, self.geo_pose)
        except rospy.ServiceException as exc:
            rospy.logerr("Service call failed: %s", exc)
            return

        self.publish_markers(resp, now, trans)

    def publish_markers(self, resp, now, trans):
        """Publish markers showing ocean current velocity."""
        vel = math.sqrt(
            math.pow(resp.twist.twist.linear.x, 2)
            + math.pow(resp.twist.twist.linear.y, 2)
        )
        angle = math.atan(resp.twist.twist.linear.x / resp.twist.twist.linear.y)

        array = MarkerArray()
        spacing = 4
        for i in range(self.num_rows):
            for j in range(self.num_cols):
                marker = self.create_marker(
                    now, vel, angle, i, j, spacing, spacing, 0, trans
                )
                array.markers.append(marker)

        for i in range(self.num_rows):
            for j in range(self.num_cols):
                marker = self.create_marker(
                    now, vel, angle, i, j, -spacing, -spacing, 1, trans
                )
                array.markers.append(marker)

        for i in range(self.num_rows):
            for j in range(self.num_cols):
                marker = self.create_marker(
                    now, vel, angle, i, j, spacing, -spacing, 2, trans
                )
                array.markers.append(marker)

        for i in range(self.num_rows):
            for j in range(self.num_cols):
                marker = self.create_marker(
                    now, vel, angle, i, j, -spacing, spacing, 3, trans
                )
                array.markers.append(marker)

        self.marker_pub.publish(array)

    def create_marker(
        self, now, vel, angle, i, j, i_scale, j_scale, id_base, trans
    ):  # pylint: disable=too-many-arguments
        """Create a single visualization marker for current at specific location."""
        marker = Marker()
        marker.header.stamp = now
        marker.header.frame_id = "world"
        marker.ns = "current_velocity"
        marker.id = (
            self.num_rows * self.num_cols * id_base + i * (self.num_cols - 1) + i + j
        )
        marker.type = Marker.ARROW
        marker.action = Marker.ADD
        marker.pose.orientation.w = 1.0
        marker.scale.x = vel * 0.5
        marker.scale.y = 0.2
        marker.color.b = 0.6
        marker.color.a = 0.4
        start = Point()
        start.x = trans[0] + i_scale * i
        start.y = trans[1] + j_scale * j
        start.z = trans[2] + 0.0
        marker.points.append(start)
        end = Point()
        end.x = trans[0] + i_scale * i + vel * 5.0 * math.cos(angle)
        end.y = trans[1] + j_scale * j + vel * 5.0 * math.sin(angle)
        end.z = trans[2] + 0.0
        marker.points.append(end)

        return marker

    def gps_callback(self, msg):
        """Update GPS data for vehicle."""
        self.geo_pose = GeoPose()
        self.geo_pose.position.latitude = msg.latitude
        self.geo_pose.position.longitude = msg.longitude
        self.geo_pose.position.altitude = msg.altitude
        self.geo_pose.orientation.w = 1.0


if __name__ == "__main__":
    rospy.init_node("ocean_currents_visualization")
    OceanCurrentsVisualization()
    rospy.spin()
